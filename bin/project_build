#!/usr/bin/env bash

###########################
#    project_build 0.1    #
###########################

# This wrapper script is auto-generated by viash 0.4.0-rc1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

function ViashSetup {
:
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Build a project, usually in the context of a pipeline."
   echo
   echo "Options:"
    echo "    -m string, --mode=string"
    echo "        type: string, default: development"
    echo "        The mode to run in. Possible values are: 'development', 'integration', 'release'."
    echo ""
    echo "    -p string, --platforms=string"
    echo "        type: string, default: docker|nextflow"
    echo "        Which platforms to test, default is 'docker|nextflow'."
    echo ""
    echo "    -q string, --query=string"
    echo "        type: string"
    echo "        Filter which components get selected by name and namespace. Can be a regex. Example: '^mynamespace/component1\$'."
    echo ""
    echo "    -n string, --query_namespace=string"
    echo "        type: string"
    echo "        Filter which namespaces get selected by namespace. Can be a regex. Example: '^mynamespace\$'."
    echo ""
    echo "    --query_name=string"
    echo "        type: string"
    echo "        Filter which components get selected by name. Can be a regex. Example: '^component1'."
    echo ""
    echo "    -v string, --version=string"
    echo "        type: string, default: dev"
    echo "        Which version of the pipeline to use."
    echo ""
    echo "    -r string, --registry=string"
    echo "        type: string, default: "
    echo "        Docker registry to use, only used when using a registry."
    echo ""
    echo "    -nc, --no-cache, --no_cache"
    echo "        type: boolean_true"
    echo "        Don't cache the docker build in development mode."
    echo ""
    echo "    --log=file"
    echo "        type: file, default: log.txt"
    echo "        Log file"
    echo ""
    echo "    --viash=file"
    echo "        type: file"
    echo "        A path to the viash executable. If not specified, this component will look for 'viash' on the \$PATH."
    echo ""
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            shift 1
            ;;
        ---push)
            VIASH_EXEC_MODE="push"
            shift 1
            ;;
        --mode)
            VIASH_PAR_MODE="$2"
            shift 2
            ;;
        --mode=*)
            VIASH_PAR_MODE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -m)
            VIASH_PAR_MODE="$2"
            shift 2
            ;;
        --platforms)
            VIASH_PAR_PLATFORMS="$2"
            shift 2
            ;;
        --platforms=*)
            VIASH_PAR_PLATFORMS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -p)
            VIASH_PAR_PLATFORMS="$2"
            shift 2
            ;;
        --query)
            VIASH_PAR_QUERY="$2"
            shift 2
            ;;
        --query=*)
            VIASH_PAR_QUERY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -q)
            VIASH_PAR_QUERY="$2"
            shift 2
            ;;
        --query_namespace)
            VIASH_PAR_QUERY_NAMESPACE="$2"
            shift 2
            ;;
        --query_namespace=*)
            VIASH_PAR_QUERY_NAMESPACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -n)
            VIASH_PAR_QUERY_NAMESPACE="$2"
            shift 2
            ;;
        --query_name)
            VIASH_PAR_QUERY_NAME="$2"
            shift 2
            ;;
        --query_name=*)
            VIASH_PAR_QUERY_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --version)
            VIASH_PAR_VERSION="$2"
            shift 2
            ;;
        --version=*)
            VIASH_PAR_VERSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -v)
            VIASH_PAR_VERSION="$2"
            shift 2
            ;;
        --registry)
            VIASH_PAR_REGISTRY="$2"
            shift 2
            ;;
        --registry=*)
            VIASH_PAR_REGISTRY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            VIASH_PAR_REGISTRY="$2"
            shift 2
            ;;
        --no_cache)
            VIASH_PAR_NO_CACHE=true
            shift 1
            ;;
        -nc)
            VIASH_PAR_NO_CACHE=true
            shift 1
            ;;
        --no-cache)
            VIASH_PAR_NO_CACHE=true
            shift 1
            ;;
        --log)
            VIASH_PAR_LOG="$2"
            shift 2
            ;;
        --log=*)
            VIASH_PAR_LOG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --viash)
            VIASH_PAR_VIASH="$2"
            shift 2
            ;;
        --viash=*)
            VIASH_PAR_VIASH=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "setup" ]; then
  ViashSetup
  exit 0
fi

if [ "$VIASH_EXEC_MODE" == "push" ]; then
  ViashPush
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



if [ -z "$VIASH_PAR_MODE" ]; then
  VIASH_PAR_MODE="development"
fi
if [ -z "$VIASH_PAR_PLATFORMS" ]; then
  VIASH_PAR_PLATFORMS="docker|nextflow"
fi
if [ -z "$VIASH_PAR_VERSION" ]; then
  VIASH_PAR_VERSION="dev"
fi
if [ -z "$VIASH_PAR_REGISTRY" ]; then
  VIASH_PAR_REGISTRY=""
fi
if [ -z "$VIASH_PAR_NO_CACHE" ]; then
  VIASH_PAR_NO_CACHE="false"
fi
if [ -z "$VIASH_PAR_LOG" ]; then
  VIASH_PAR_LOG="log.txt"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-project_build-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par_mode='$VIASH_PAR_MODE'
par_platforms='$VIASH_PAR_PLATFORMS'
par_query='$VIASH_PAR_QUERY'
par_query_namespace='$VIASH_PAR_QUERY_NAMESPACE'
par_query_name='$VIASH_PAR_QUERY_NAME'
par_version='$VIASH_PAR_VERSION'
par_registry='$VIASH_PAR_REGISTRY'
par_no_cache='$VIASH_PAR_NO_CACHE'
par_log='$VIASH_PAR_LOG'
par_viash='$VIASH_PAR_VIASH'

resources_dir="$VIASH_RESOURCES_DIR"

#!/bin/bash

# if not specified, default queries to a catch-all regexes
if [ -z "\$par_query" ]; then
  par_query=".*"
fi
if [ -z "\$par_query_namespace" ]; then
  par_query_namespace=".*"
fi
if [ -z "\$par_query_name" ]; then
  par_query_name=".*"
fi

# if not specified, default par_viash to look for 'viash' on the PATH
if [ -z "\$par_viash" ]; then
  par_viash="viash"
fi

if [ "\$par_mode" == "development" ]; then
  echo "In development mode..."
  
  if [ "\$par_no_cache" == "true" ]; then
    setup_strat="build"
  else 
    setup_strat="cachedbuild"
  fi
  
  "\$par_viash" ns build \\
    --platform "\$par_platforms" \\
    --query "\$par_query" \\
    --query_name "\$par_query_name" \\
    --query_namespace "\$par_query_namespace" \\
    -c '.functionality.version := "dev"' \\
    -c '.platforms[.type == "docker"].setup_strategy := "'\$setup_strat'"' \\
    -l -w \\
    --setup | tee "\$par_log"
elif [ "\$par_mode" == "integration" ]; then
  echo "In integration mode..."
  
  if [ "\$par_no_cache" == "true" ]; then
    echo "Warning: '--no_cache' only applies when '--mode=development'."
  fi
  
  "\$par_viash" ns build \\
    --platform "\$par_platforms" \\
    --query "\$par_query" \\
    --query_name "\$par_query_name" \\
    --query_namespace "\$par_query_namespace" \\
    -c '.functionality.version := "'"\$par_version"'"' \\
    -c '.platforms[.type == "docker"].target_registry := "'"\$par_registry"'"' \\
    -c '.platforms[.type == "docker"].setup_strategy := "build"' \\
    -c '.platforms[.type == "nextflow"].registry := "'"\$par_registry"'"' \\
    -l -w \\
    --setup | tee "\$par_log"
elif [ "\$par_mode" == "release" ]; then
  echo "In release mode..."
  
  if [ "\$par_no_cache" == "true" ]; then
    echo "Warning: '--no_cache' only applies when '--mode=development'."
  fi
  
  if [ "\$par_version" == "dev" ]; then
    echo "Error: For a release, you have to specify an explicit version using --version"
    exit 1
  fi
  "\$par_viash" ns build \\
    --platform "\$par_platforms" \\
    --query "\$par_query" \\
    --query_name "\$par_query_name" \\
    --query_namespace "\$par_query_namespace" \\
    -c '.functionality.version := "'"\$par_version"'"' \\
    -c '.platforms[.type == "docker"].target_registry := "'"\$par_registry"'"' \\
    -c '.platforms[.type == "docker"].setup_strategy := "build"' \\
    -c '.platforms[.type == "nextflow"].registry := "'"\$par_registry"'"' \\
    -l -w \\
    --setup | tee "\$par_log"
else
  echo "Not a valid mode argument"
fi
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

bash "\$tempscript"

VIASHEOF
