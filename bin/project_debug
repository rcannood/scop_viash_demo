#!/usr/bin/env bash

###########################
#    project_debug 0.1    #
###########################

# This wrapper script is auto-generated by viash 0.4.0-rc1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

function ViashSetup {
:
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Generate debugging report based on viash ns test output"
   echo
   echo "Options:"
    echo "    --input=file"
    echo "        type: file, required parameter"
    echo "        viasn ns test output file (tsv format)"
    echo ""
    echo "    --tmp=file"
    echo "        type: file, default: /tmp"
    echo "        System temp dir if different from /tmp (e.g. on Mac use /private/tmp)"
    echo ""
    echo "    --output=file"
    echo "        type: file, default: debug_report.md"
    echo "        Name/path of the output markdown file"
    echo ""
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            shift 1
            ;;
        ---push)
            VIASH_EXEC_MODE="push"
            shift 1
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --tmp)
            VIASH_PAR_TMP="$2"
            shift 2
            ;;
        --tmp=*)
            VIASH_PAR_TMP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "setup" ]; then
  ViashSetup
  exit 0
fi

if [ "$VIASH_EXEC_MODE" == "push" ]; then
  ViashPush
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  echo '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TMP" ]; then
  VIASH_PAR_TMP="/tmp"
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT="debug_report.md"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-project_debug-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par_input='$VIASH_PAR_INPUT'
par_tmp='$VIASH_PAR_TMP'
par_output='$VIASH_PAR_OUTPUT'

resources_dir="$VIASH_RESOURCES_DIR"

#!/bin/bash

# set -ex

function output {
  echo "\$@" >> \$par_output
}

echo "# Debug Report \`date\`" > \$par_output
output ""
output "This reports uses the provided tsv log file to retrieve components"
output "that gave errors during a \\\`viash ns test\\\` test run."

output ""
output "In _append_ mode, additional test results are added to the tsv log file,"
output "so an error may already be resolved but still represented here."

output ""
output "In general, the following situations are possible:"
output ""
output "1. A component gives no errors, all builds and tests runs well for every platform"
output "2. A component fails for a given platform, either during build or test"
output "  a. There is at least one failure in the tsv log file, but the last entry is a success."
output "  b. The last run for this component failed."
output ""

# Retrieve information about errors
cat \$par_input | grep ERROR > /dev/null
contains_errors=\$?
if [ \$contains_errors -eq 0 ]; then
  errors=1
  cat \$par_input | grep ERROR > /\$par_tmp/failed.tsv
else
  errors=0
fi

# Retrieve information about missings
cat \$par_input | grep MISSING > /dev/null
contains_missings=\$?
if [ \$contains_missings -eq 0 ]; then
  missings=1
  cat \$par_input | grep MISSING > \$par_tmp/missing.tsv
else
  missings=0
fi

# Retrieve information about success
cat \$par_input | grep SUCCES > /dev/null
contains_success=\$?
if [ \$contains_success -eq 0 ]; then
  success=1
  cat \$par_input | grep SUCCESS > \$par_tmp/success.tsv
else
  success=0
fi
# Start writing content
output "## Overview"
output ""

output "Failed components:"
output ""
if [ \$errors -eq 1 ]; then
  cat /\$par_tmp/failed.tsv | while read f; do
    ns=\`echo -n "\$f" | cut -f1\`
    comp=\`echo -n "\$f" | cut -f2\`
    platform=\`echo -n "\$f" | cut -f3\`
    still_exec=\`cat \$par_input | grep "\$ns\\t\$comp\\t\$platform" | tail -1 | grep ERROR\`
    still=\$?
    if [ \$still -eq 0 ]; then
      line="- \\\`\$comp\\\` in \\\`\$ns\\\`, platform \\\`\$platform\\\` and is still open. See full report below."
    else
      line="- \\\`\$comp\\\` in \\\`\$ns\\\`, platform \\\`\$platform\\\` but is resolved."
    fi
    output "\$line"
  done
  output ""
else
  output "No failed components"
  output ""
fi

output "Missing components:"
output ""
if [ \$missings -eq 1 ]; then
  cat \$par_tmp/missing.tsv | cut -f1,2,3 | sort | uniq | while read f; do
    ns=\`echo -n "\$f" | cut -f1\`
    comp=\`echo -n "\$f" | cut -f2\`
    platform=\`echo -n "\$f" | cut -f3\`
    output "- \\\`\$comp\\\` in \\\`\$ns\\\`, platform \\\`\$platform\\\`"
  done
  output ""
else
  output "No missing components"
  output ""
fi

# output "Working components:"
# output ""
# if [ \$success -eq 1 ]; then
#   cat \$par_tmp/success.tsv | cut -f1,2,3 | sort | uniq | while read f; do
#     ns=\`echo -n "\$f" | cut -f1\`
#     comp=\`echo -n "\$f" | cut -f2\`
#     platform=\`echo -n "\$f" | cut -f3\`
#     output "- \\\`\$comp\\\` in \\\`\$ns\\\`, platform \\\`\$platform\\\`"
#   done
#   output ""
# else
#   output "No successfull components"
#   output ""
# fi

if [ \$errors -eq 1 ]; then

  output ""
  output "## Error report"
  output ""

  cat /\$par_tmp/failed.tsv | while read f; do
    ns=\`echo -n "\$f" | cut -f1\`
    comp=\`echo -n "\$f" | cut -f2\`
    platform=\`echo -n "\$f" | cut -f3\`
    still_exec=\`cat \$par_input | grep "\$ns\\t\$comp\\t\$platform" | tail -1 | grep ERROR\`
    still=\$?
    root_test_dir=\`ls -ctd "\$par_tmp/viash_test_\$comp"* | head -1\`

    if [ \$still -eq 0 ]; then

      output "### \\\`\$comp\\\` Build"
      output ""
      output "Files:"
      output ""
      output '\`\`\`'
      ls -alh "\$root_test_dir/build_executable" > \$par_tmp/list.log
      cat \$par_tmp/list.log >> \$par_output
      output '\`\`\`'
      output ""
      output "Build log:"
      output '\`\`\`'
      cat "\$root_test_dir/build_executable/_viash_build_log.txt" >> \$par_output
      output '\`\`\`'

      output "### \\\`\$comp\\\` Test"
      output ""
      output "Files:"
      output ""
      output '\`\`\`'
      ls -alh "\$root_test_dir/test_run"* > \$par_tmp/list.log
      cat \$par_tmp/list.log >> \$par_output
      output '\`\`\`'
      output ""
      output "Setup log:"
      output '\`\`\`'
      cat "\$root_test_dir/test_"*"/_viash_test_log.txt" >> \$par_output
      output '\`\`\`'
    fi

  done
  output ""

fi
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

bash "\$tempscript"

VIASHEOF
