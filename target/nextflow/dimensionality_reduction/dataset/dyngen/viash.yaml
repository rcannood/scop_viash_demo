functionality:
  name: "dyngen"
  namespace: "dimensionality_reduction/dataset"
  version: "dev"
  authors:
  - name: "Robrecht Cannoodt"
    email: "RCannoo1@its.jnj.com"
    roles:
    - "maintainer"
    props:
      account: "rcannoo1"
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Dummy parameter"
    default: "test"
    must_exist: false
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--backbone"
    alternatives:
    - "-b"
    description: "Backbone type"
    default: "trifurcating"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Output h5ad file."
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      ####################
      #    dyngen dev    #
      ####################
      
      # This wrapper script is auto-generated by viash 0.4.0-rc1 and is thus a
      # derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
      # Data Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Robrecht Cannoodt <RCannoo1@its.jnj.com> (maintainer) {account: rcannoo1}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      VIASH_EXEC_MODE="run"
      
      function ViashSetup {
      :
      }
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
         echo "Generates a dataset with dyngen."
         echo
         echo "Options:"
          echo "    -i file, --input=file"
          echo "        type: file, default: test"
          echo "        Dummy parameter"
          echo ""
          echo "    -b string, --backbone=string"
          echo "        type: string, default: trifurcating"
          echo "        Backbone type"
          echo ""
          echo "    -o file, --output=file"
          echo "        type: file, required parameter"
          echo "        Output h5ad file."
          echo ""
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit;;
              ---setup)
                  VIASH_EXEC_MODE="setup"
                  shift 1
                  ;;
              ---push)
                  VIASH_EXEC_MODE="push"
                  shift 1
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -i)
                  VIASH_PAR_INPUT="$2"
                  shift 2
                  ;;
              --backbone)
                  VIASH_PAR_BACKBONE="$2"
                  shift 2
                  ;;
              --backbone=*)
                  VIASH_PAR_BACKBONE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -b)
                  VIASH_PAR_BACKBONE="$2"
                  shift 2
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      if [ "$VIASH_EXEC_MODE" == "setup" ]; then
        ViashSetup
        exit 0
      fi
      
      if [ "$VIASH_EXEC_MODE" == "push" ]; then
        ViashPush
        exit 0
      fi
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        echo '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT" ]; then
        VIASH_PAR_INPUT="test"
      fi
      if [ -z "$VIASH_PAR_BACKBONE" ]; then
        VIASH_PAR_BACKBONE="trifurcating"
      fi
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-dyngen-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      # The following code has been auto-generated by Viash.
      par <- list(
        "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo NULL; fi ),
        "backbone" = $( if [ ! -z ${VIASH_PAR_BACKBONE+x} ]; then echo "'$VIASH_PAR_BACKBONE'"; else echo NULL; fi ),
        "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
      )
      
      resources_dir = "$VIASH_RESOURCES_DIR"
      
      options(tidyverse.quiet = TRUE)
      library(tidyverse)
      library(dyngen, warn.conflicts = FALSE)
      
      ### VIASH START
      ### VIASH END
      
      backbones <- list_backbones()
      backbone <- backbones[[par\$backbone]]()
      
      # ideally, a lot of these parameters would get exposed
      config <-
        initialise_model(
          backbone = backbone,
          num_tfs = nrow(backbone\$module_info),
          num_targets = 100,
          num_hks = 100,
          num_cells = 500,
          simulation_params = simulation_default(
            experiment_params = simulation_type_wild_type(num_simulations = 6)
          ),
          verbose = FALSE
        )
      
      out <- generate_dataset(config, format = "none")
      
      ad <- as_anndata(out\$model)
      
      if (file.exists(par\$output)) file.remove(par\$output)
      ad\$write_h5ad(par\$output, compression = "gzip")
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      Rscript "\$tempscript"
      
      VIASHEOF
      

    dest: "dyngen"
    is_executable: true
  - type: "file"
    text: |
        docker.enabled = true
        docker.runOptions = "-i -v ${baseDir}:${baseDir}"
        process.container = "dataintuitive/portash"
        params {
          dyngen__input = "test"
          dyngen__backbone = "trifurcating"
          dyngen__output = "value_not_found"
          id = ""
          input = ""
          output = ""
          testScript = "run_test.py"
          testResources = [ "run_test.py" ]
          dyngen {
            name = "dyngen"
            container = "dimensionality_reduction/dataset/dyngen"
            containerTag = "dev"
            containerRegistry = ""
            command = "dyngen"
            tests {
              isDefined = true
              testScript = "run_test.py"
              testResources = [ "run_test.py" ]
            }
            arguments {
              input {
                name = "input"
                otype = "--"
                required = false
                type = "file"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                description = "Dummy parameter"
                value = "${params.dyngen__input}"
              }
              backbone {
                name = "backbone"
                otype = "--"
                required = false
                type = "string"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                description = "Backbone type"
                value = "${params.dyngen__backbone}"
              }
              output {
                name = "output"
                otype = "--"
                required = true
                type = "file"
                direction = "Output"
                multiple = false
                multiple_sep = ":"
                description = "Output h5ad file."
              }
            }
          }
        }

    dest: "nextflow.config"
  - type: "file"
    text: |
      nextflow.preview.dsl=2
      import java.nio.file.Paths
      
      def renderCLI(command, arguments) {
      
          def argumentsList = arguments.collect{ it ->
              (it.otype == "")
                  ? "\'" + it.value + "\'"
                  : (it.type == "boolean_true")
                      ? it.otype + it.name
                      : (it.value == "")
                          ? ""
                          : it.otype + it.name + " \'" + ((it.value in List && it.multiple) ? it.value.join(it.multiple_sep): it.value) + "\'"
          }
      
          def command_line = command + argumentsList
      
          return command_line.join(" ")
      }
      
      def effectiveContainer(processParams) {
          def _registry = params.containsKey("containerRegistry") ? params.containerRegistry : processParams.containerRegistry
          def _name = processParams.container
          def _tag = params.containsKey("containerTag") ? params.containerTag : processParams.containerTag
      
          return (_registry == "" ? "" : _registry + "/") + _name + ":" + _tag
      }
      
      // files is either String, List[String] or HashMap[String,String]
      def outFromIn(files) {
          if (files in List || files in HashMap) {
              // We're in join mode, files is List[String]
              return "dyngen" + "." + extension
          } else {
              // files filename is just a String
              def splitString = files.split(/\./)
              def prefix = splitString.head()
              def extension = splitString.last()
              return prefix + "." + "dyngen" + "." + extension
          }
      }
      
      // In: Hashmap key -> DataObjects
      // Out: Arrays of DataObjects
      def overrideInput(params, str) {
      
          // `str` in fact can be one of:
          // - `String`,
          // - `List[String]`,
          // - `Map[String, String | List[String]]`
          // Please refer to the docs for more info
          def overrideArgs = params.arguments.collect{ it ->
            (it.value.direction == "Input" && it.value.type == "file")
              ? (str in List || str in HashMap)
                  ? (str in List)
                      ? it.value + [ "value" : str.join(it.value.multiple_sep)]
                      : (str[it.value.name] != null)
                          ? (str[it.value.name] in List)
                              ? it.value + [ "value" : str[it.value.name].join(it.value.multiple_sep)]
                              : it.value + [ "value" : str[it.value.name]]
                          : it.value
                  : it.value + [ "value" : str ]
              : it.value
          }
      
          def newParams = params + [ "arguments" : overrideArgs ]
      
          return newParams
      }
      
      def overrideOutput(params, str) {
      
          def update = [ "value" : str ]
      
          def overrideArgs = params.arguments.collect{it ->
            (it.direction == "Output" && it.type == "file")
              ? it + update
              : it
          }
      
          def newParams = params + [ "arguments" : overrideArgs ]
      
          return newParams
      }
      
      
      process dyngen_process {
        
        tag "${id}"
        echo { (params.debug == true) ? true : false }
        cache 'deep'
        stageInMode "symlink"
        container "${container}"
        
        input:
          tuple val(id), path(input), val(output), val(container), val(cli)
        output:
          tuple val("${id}"), path("${output}")
        script:
          if (params.test)
              """
              # Some useful stuff
              export NUMBA_CACHE_DIR=/tmp/numba-cache
              # Running the pre-hook when necessary
              echo Nothing before
              # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
              export PATH="./:${moduleDir}:\$PATH"
              ./${params.dyngen.tests.testScript} | tee $output
              """
          else
              """
              # Some useful stuff
              export NUMBA_CACHE_DIR=/tmp/numba-cache
              # Running the pre-hook when necessary
              echo Nothing before
              # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
              export PATH="${moduleDir}:\$PATH"
              $cli
              """
      }
      
      workflow dyngen {
      
          take:
          id_input_params_
      
          main:
      
          def key = "dyngen"
      
          def id_input_output_function_cli_ =
              id_input_params_.map{ id, input, _params ->
                  // TODO: make sure input is List[Path], HashMap[String,Path] or Path, otherwise convert
                  // NXF knows how to deal with an List[Path], not with HashMap !
                  def checkedInput =
                      (input in HashMap)
                          ? input.collect{ k, v -> v }.flatten()
                          : input
                  // filename is either String, List[String] or HashMap[String, String]
                  def filename =
                      (input in List || input in HashMap)
                          ? (input in List)
                              ? input.collect{ it.name }
                              : input.collectEntries{ k, v -> [ k, (v in List) ? v.collect{it.name} : v.name ] }
                          : input.name
                  def defaultParams = params[key] ? params[key] : [:]
                  def overrideParams = _params[key] ? _params[key] : [:]
                  def updtParams = defaultParams + overrideParams
                  // now, switch to arrays instead of hashes...
                  def outputFilename = (!params.test) ? outFromIn(filename) : updtParams.output
                  def updtParams1 = overrideInput(updtParams, filename)
                  def updtParams2 = overrideOutput(updtParams1, outputFilename)
                  new Tuple5(
                      id,
                      checkedInput,
                      outputFilename,
                      effectiveContainer(updtParams2),
                      renderCLI([updtParams2.command], updtParams2.arguments)
                  )
              }
          result_ = dyngen_process(id_input_output_function_cli_) \
              | join(id_input_params_) \
              | map{ id, output, input, original_params ->
                  new Tuple3(id, output, original_params)
              }
      
          emit:
          result_
      
      }
      
      workflow {
      
         def id = params.id
         def ch_ = Channel.fromPath(params.input).map{ s -> new Tuple3(id, s, params)}
      
         dyngen(ch_)
      }
      
      workflow test {
      
         take:
         rootDir
      
         main:
         params.test = true
         params.dyngen.output = "dyngen.log"
      
         Channel.from(rootDir) \
              | filter { params.dyngen.tests.isDefined } \
              | map{ p -> new Tuple3(
                          "tests",
                          params.dyngen.tests.testResources.collect{ file( p + it ) },
                          params
                      )} \
              | dyngen
      
          emit:
          dyngen.out
      }

    dest: "main.nf"
  description: "Generates a dataset with dyngen."
  tests:
  - type: "python_script"
    path: "run_test.py"
    is_executable: true
platform:
  type: "nextflow"
  id: "nextflow"
platforms: []
info:
  config: "src/dimensionality_reduction/dataset/dyngen/config.vsh.yaml"
  platform: "nextflow"
  output: "target/nextflow/dimensionality_reduction/dataset/dyngen"
  executable: "target/nextflow/dimensionality_reduction/dataset/dyngen/dyngen"
  viash_version: "0.4.0-rc1"
  git_commit: "1b981718f8370d56b7a29dd27500b17a0d7cf2ab"
  git_remote: "git@github.com:rcannood/scop_viash_demo.git"
